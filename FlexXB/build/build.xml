<?xml version="1.0"?> 
<project name="${project.name}" basedir="../">  
	<!-- Define variables/paths used in this build script --> 
	<tstamp>
		<format property="timestamp" pattern="ddMMyyyy"/>
		<format property="currentDate" pattern="dd-MM-yyyy"/>
	</tstamp>
	<property file="./build/build.properties" />   
	<property file="../svn.properties"/>
	<condition property="pmdDir.Exists">
		<available file="${flexpmd.dir}" property="pmdDir.Exists"/>
	</condition>
	<!-- SDK description markers -->
	<xmlproperty file="${flexsdk.dir}/flex-sdk-description.xml"/>
	<property name="flexSDKVersion" value="${flex-sdk-description.version}"/>
	<property name="flexSDKName" value="${flex-sdk-description.name}"/>
	<property name="flexSDKBuild" value="${flex-sdk-description.build}"/>
	
	<taskdef resource="flexUnitTasks.tasks" classpath="${basedir}/libs/ant/flexUnitTasks-4.0.0.jar"/>
	<taskdef resource="flexTasks.tasks" classpath="${basedir}/libs/ant/flexTasks.jar"/>
	<taskdef format="xml" resource="org/tigris/subversion/svnant/svnantlib.xml" >
		<classpath>
			<pathelement location="${basedir}/libs/ant/svnant.jar"/>
			<pathelement location="${basedir}/libs/ant/svnClientAdapter.jar"/>
			<pathelement location="${basedir}/libs/ant/svnjavahl.jar"/>
		</classpath>
	</taskdef>

	    <!--****************************************************
	                FlexPMD
	        *****************************************************-->
	 <taskdef name="flexPmd"
		classname="com.adobe.ac.pmd.ant.FlexPmdAntTask"
		classpath="${flexpmd.dir}/flex-pmd-ant-task-${flexpmd.version}.jar">
	        <classpath>
	            <pathelement location="${flexpmd.dir}/flex-pmd-ruleset-api-${flexpmd.version}.jar"/>
	            <pathelement location="${flexpmd.dir}/flex-pmd-ruleset-${flexpmd.version}.jar"/>
	            <pathelement location="${flexpmd.dir}/flex-pmd-core-${flexpmd.version}.jar"/>
	            <pathelement location="${flexpmd.dir}/as3-plugin-utils-${flexpmd.version}.jar"/>
	            <pathelement location="${flexpmd.dir}/as3-parser-${flexpmd.version}.jar"/>
	            <pathelement location="${flexpmd.dir}/pmd-4.2.5.jar"/>
	            <pathelement location="${flexpmd.dir}/commons-lang-2.4.jar"/>
	            <pathelement location="${flexpmd.dir}/flex-pmd-files-${flexpmd.version}.jar"/>
	            <pathelement location="${flexpmd.dir}/as3-parser-api-${flexpmd.version}.jar"/>
	            <pathelement location="${flexpmd.dir}/plexus-utils-1.0.2.jar"/>
	        </classpath>
	 </taskdef>
	
	 <taskdef name="flexCpd" classname="com.adobe.ac.cpd.ant.FlexCpdAntTask"
	         classpath="${flexpmd.dir}/flex-pmd-cpd-ant-task-${flexpmd.version}.jar">
	      <classpath>
	         <pathelement location="${flexpmd.dir}/flex-pmd-files-${flexpmd.version}.jar" />
	         <pathelement location="${flexpmd.dir}/flex-pmd-cpd-${flexpmd.version}.jar" />
	         <pathelement location="${flexpmd.dir}/as3-plugin-utils-${flexpmd.version}.jar" />
	         <pathelement location="${flexpmd.dir}/as3-parser-${flexpmd.version}.jar" />
	         <pathelement location="${flexpmd.dir}/as3-parser-api-${flexpmd.version}.jar" />
	         <pathelement location="${flexpmd.dir}/pmd-4.2.5.jar" />
	      </classpath>
	 </taskdef>

	 <taskdef name="flexMetrics" classname="com.adobe.ac.pmd.metrics.ant.FlexMetricsAntTask"
	       classpath="${flexpmd.dir}/flex-pmd-metrics-ant-task-${flexpmd.version}.jar">
	      <classpath>
	        <pathelement location="${flexpmd.dir}/flex-pmd-files-${flexpmd.version}.jar" />
	        <pathelement location="${flexpmd.dir}/flex-pmd-metrics-${flexpmd.version}.jar" />
	        <pathelement location="${flexpmd.dir}/as3-plugin-utils-${flexpmd.version}.jar" />
	        <pathelement location="${flexpmd.dir}/as3-parser-${flexpmd.version}.jar" />
	        <pathelement location="${flexpmd.dir}/as3-parser-api-${flexpmd.version}.jar" />
			<pathelement location="${flexpmd.dir}/commons-lang-2.4.jar" />
	      	<pathelement location="${flexpmd.dir}/flex-pmd-core-${flexpmd.version}.jar" />
	      	<pathelement location="${flexpmd.dir}/flex-pmd-ruleset-${flexpmd.version}.jar" />
			<pathelement location="${flexpmd.dir}/flex-pmd-ruleset-api-${flexpmd.version}.jar" />
	        <pathelement location="${flexpmd.dir}/pmd-4.2.5.jar" />
	      	<pathelement location="${flexpmd.dir}/dom4j-1.6.1.jar"/>
	      </classpath>
	 </taskdef>

	<!-- -->
	<target name="init" description="Initializes the build">  
		<tstamp/>  
		<echo message="============================================="/>  
		<echo message="${project.name}-${project.version} [${TODAY}]"/>  
		<echo message="Copyright (c) 2008 - 2009 ${project.owner}"/>  
		<echo message="OS : ${os.name}" />  
		<echo message="Author: ${author}" />  
		<echo message="=============================================="/> 
	</target>
	<!-- -->
	<target name="properties" depends="init">
		<fail unless="asdoc.exe">The "asdoc.exe" property must be set in ${build.dir}/build.properties.</fail> 
		<fail unless="compc.exe">The "compc.exe" property must be set in ${build.dir}/build.properties.</fail>
		<fail unless="mxmlc.exe">The "mxmlc.exe" property must be set in ${build.dir}/build.properties.</fail>
		<fail unless="amxmlc.bat">The "amxmlc.bat" property must be set in ${build.dir}/build.properties.</fail>
	</target>
	<!-- -->
	<target name="build.project" depends="properties, clean">
		<exec executable="${compc.exe}" dir="${basedir}">
			<arg line="-o '${project.swc.output}'"/>
			<arg line="-sp '${project.src.dir}'"/>
			<arg line="-is '${project.src.dir}'"/>
			<arg line="-debug=false"/>
			<arg line="-external-library-path='${flexsdk.lib.dir}','${flexsdk.playerlib.dir}'"/>
			<arg line="${compile.metadata}"/>
		</exec>
	</target>
	<target name="build.project.json" depends="build.project">
			<exec executable="${compc.exe}" dir="${basedir}">
				<arg line="-o '${project.swc.json.output}'"/>
				<arg line="-sp '${project.src.json.dir}'"/>
				<arg line="-is '${project.src.json.dir}'"/>
				<arg line="-debug=false"/>
				<arg line="-external-library-path='${flexsdk.lib.dir}','${flexsdk.playerlib.dir}','${project.swc.output}'"/>
				<arg line="${compile.metadata}"/>
			</exec>
		</target>
	<!-- -->
	<target name="build.project.test" depends="build.project.json">
		 <exec executable="${mxmlc.exe}" failonerror="true">
    	 	<arg value="-source-path=${project.tests.src.dir}"/>
    	 	<arg value="-file-specs=${project.tests.src.dir}/${project.name}Test.mxml"/>
    	 	<arg value="-output=${bin.dir}/test/${project.name}Test.swf"/>		
    	 	    	 	
    	 	<arg value="-actionscript-file-encoding=UTF-8"/>
    	 	<arg value="-debug=false"/>
    	 	<arg value="-incremental=false"/>
		 	<arg value="-optimize=true"/>
    	 	<arg value="-keep-generated-actionscript=false"/>
    	 	    		
    	 	<arg line="${compile.metadata}"/>
			<arg line="-include-libraries ${flexunit.libs}"/>
		 	<arg line="-include-libraries ${project.swc.output}"/>
		 	<arg line="-include-libraries ${project.swc.json.output}"/>
    	 </exec>
		<make.wrapper application="${project.test.name}" output.dir="${bin.dir}/test" wrapper.dir="${project.test.dir}/html-template"
			output.html="${bin.dir}/test/${project.test.name}.html" swf="${project.test.name}"
			title="${project.name} Test"/>
		<exec executable="${mxmlc.exe}" failonerror="true">
    	 	<arg value="-source-path=${project.tests.src.dir}"/>
    	 	<arg value="-file-specs=${project.tests.src.dir}/AntTestRunner.mxml"/>
    	 	<arg value="-output=${project.test.ant.output}"/>		
    	 	    	 	
    	 	<arg value="-actionscript-file-encoding=UTF-8"/>
    	 	<arg value="-debug=false"/>
    	 	<arg value="-incremental=false"/>
			<arg value="-optimize=true"/>
    	 	<arg value="-keep-generated-actionscript=false"/>
    	 	    		
    	 	<arg line="${compile.metadata}"/>
			<arg line="-include-libraries ${flexunit.libs}"/>
		 	<arg line="-include-libraries ${project.swc.output}"/>
    	 </exec>
	</target>
	<!-- -->
	<target name="development" depends="build.project, build.project.test, Metrics">
		<antcall target="documentation" />
		<antcall target="embedAsDoc"/>
		<antcall target="documentationJSON" />
		<antcall target="embedAsDocJSON"/>
	</target>
	<!-- -->
	<target name="release" depends="development, junit.ui">
		<make.readme />
		<antcall target="copySchemas"/>
		<zip destfile="${bin.dir}/${release.name.bin}">
			<fileset dir="${basedir}">
				<exclude name="**/build/**"/>
				<exclude name="**/${project.name}/**"/>
				<exclude name="**/${project.name}Test/**"/>
				<exclude name="**/libs/**"/>
				<exclude name="**/.*"/>
				<exclude name="**/.*/**"/>
			</fileset>
		</zip>
		<zip destfile="${bin.dir}/${release.name.src}">
			<fileset dir="${basedir}">
				<exclude name="**/*.zip"/>
				<exclude name="**/bin/*.*"/>
				<exclude name="**/bin/*/**"/>
				<exclude name="**/${project.name}/bin/*.*"/>
				<exclude name="**/${project.name}Test/bin-debug/*.*"/>
				<exclude name="**/${project.name}Test/bin-debug/*/**"/>
			</fileset>
		</zip>
		<svn username="${svn.username}" password="${svn.password}">
			<commit dir="${basedir}/doc" recurse="true" message="commited doc updates"/>
			<commit dir="${basedir}/releasenotes" message="commited the latest readme"/>
			<copy message="release ${release.version} branch" revision="HEAD" srcUrl="${svn.HEAD.dir}" destUrl="${svn.branch.dir}/${release.name}_${release.version}"/>
		</svn>
	</target>
	
	<target name="clean">
		<delete failonerror="true" includeemptydirs="true">
			<fileset dir="${bin.dir}">
				<include name="**/**"/>
			</fileset>
		</delete>
	</target>
	
	<target name="copySchemas">
		<mkdir dir="${bin.dir}/schema"/>
		<copy file="${project.src.dir}/com/googlecode/flexxb/api/schema/FlexXB.xsd"
			  tofile="${bin.dir}/schema/FlexXB.xsd" 
			  overwrite="true"/>
		<copy file="${project.src.dir}/com/googlecode/flexxb/xml/api/schema/FlexXB-XML.xsd"
			  tofile="${bin.dir}/schema/FlexXB-XML.xsd" 
			  overwrite="true"/>
		<replaceregexp file="${bin.dir}/schema/FlexXB-XML.xsd"
						flags="gs"
						match="../../../api/schema/FlexXB.xsd"
						replace="FlexXB.xsd"/>
	</target>
	
	<!-- -->
	<target name="documentation">
		<delete failonerror="true" includeemptydirs="true">
			<fileset dir="${doc.dir}/asdoc">
				<include name="**/**"/>
			</fileset>
		</delete>
		<exec executable="${asdoc.exe}">
			<arg line="-source-path ${project.src.dir}"/>
			<arg line="-doc-sources ${project.src.dir}"/>
			<arg line="-output ${doc.dir}/asdoc"/>
			<arg line="-main-title ${doc.title}"/>
			<arg line="-window-title ${doc.title}"/>
			<arg line="-package-description-file ${doc.dir}/packageDescriptor.xml"/>
			<arg line="-lenient"/>
			<arg line="-keep-xml"/>
		</exec>
	</target>
	
	<target name="embedAsDoc">
		<zip destfile="${project.swc.output}" update="true">
		    <zipfileset dir="${doc.dir}/asdoc/tempdita" prefix="docs">
			    <include name="*.*"/>
				<exclude name="ASDoc_Config.xml"/>
				<exclude name="overviews.xml"/>
		    </zipfileset>
		</zip>
		<delete dir="${doc.dir}/asdoc/tempdita"/>
	</target>
	
	<!-- -->
	<target name="documentationJSON">
		<delete failonerror="true" includeemptydirs="true">
			<fileset dir="${doc.dir}/asdoc_JSON">
				<include name="**/**"/>
			</fileset>
		</delete>
		<exec executable="${asdoc.exe}">
			<arg line="-source-path ${project.src.json.dir}"/>
			<arg line="-doc-sources ${project.src.json.dir}"/>
			<arg line="-library-path '${flexsdk.lib.dir}'"/>
			<arg line="-library-path '${flexsdk.playerlib.dir}'"/>
			<arg line="-library-path '${project.swc.output}'"/>
			<arg line="-output ${doc.dir}/asdoc_JSON"/>
			<arg line="-main-title &quot;FlexXB: JSON Serialization extension&quot;"/>
			<arg line="-window-title &quot;FlexXB: JSON Serialization extension&quot;"/>
			<arg line="-package-description-file ${doc.dir}/packageDescriptorJSON.xml"/>
			<arg line="-lenient"/>
			<arg line="-keep-xml"/>
		</exec>
	</target>
	
	<target name="embedAsDocJSON">
		<zip destfile="${project.swc.json.output}" update="true">
		    <zipfileset dir="${doc.dir}/asdoc_JSON/tempdita" prefix="docs">
			    <include name="*.*"/>
				<exclude name="ASDoc_Config.xml"/>
				<exclude name="overviews.xml"/>
		    </zipfileset>
		</zip>
		<delete dir="${doc.dir}/asdoc_JSON/tempdita"/>
	</target>
	
	<target name="junit.ui" depends="build.project.test">
		<mkdir dir="${bin.dir}/flexunit/reports/${project.name}Test"/>
		<flexunit
				player="flash"
				swf="${project.test.ant.output}"
				toDir="${bin.dir}/flexunit/reports/${project.name}Test"
				haltonfailure="false"
				verbose="true"
				failureproperty="flexunit.failed"
				localTrusted="true"
				port="1024"
				buffer="262144"
				timeout="60000"
				headless="false"/>

		<junitreport todir="${bin.dir}/flexunit/reports/${project.name}Test">
			<fileset dir="${bin.dir}/flexunit/reports/${project.name}Test">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${bin.dir}/flexunit/reports/flex"/>
		</junitreport>

		<fail
				message="One or more flexunit tests failed. See test reports for details."
				if="flexunit.failed"/>
	</target>
	
	<target name="Metrics" if="pmdDir.Exists">
		<flexPmd sourcedirectory="${project.src.dir}" outputdirectory="${bin.dir}/metrics/pmd" 
			ruleset="${flexpmd.dir}/../pmd.xml"/>
		<flexCpd minimumtokencount="50" outputfile="${bin.dir}/metrics/cpd.xml">
			<fileset dir="${project.src.dir}">
				<include name="**/*.as"/>
				<include name="**/*.mxml"/>
			</fileset>
		</flexCpd>
		<flexMetrics sourcedirectory="${project.src.dir}" outputfile="${bin.dir}/metrics/javancss.xml"/>
	</target>
	
	<macrodef name="make.readme">
		<sequential>
			<copy file="${basedir}/README.txt" tofile="${basedir}/releasenotes/readme-v${release.version}.txt" overwrite="true"/>
			<replaceregexp file="${basedir}/releasenotes/readme-v${release.version}.txt"
				flags="gs"
				match="\$\{release.version\}"
				replace="${release.version}"/>
			<replaceregexp file="${basedir}/releasenotes/readme-v${release.version}.txt"
				flags="gs"
				match="\$\{project.version\}"
				replace="${project.version}"/>
			<replaceregexp file="${basedir}/releasenotes/readme-v${release.version}.txt"
				flags="gs"
				match="\$\{today\}"
				replace="${timestamp}"/>
			<replaceregexp file="${basedir}/releasenotes/readme-v${release.version}.txt"
				flags="gs"
				match="\$\{currentDate\}"
				replace="${currentDate}"/>
			<replaceregexp file="${basedir}/releasenotes/readme-v${release.version}.txt"
				flags="gs"
				match="\$\{project.name\}"
				replace="${project.name}"/>
		</sequential>
	</macrodef>
	
	<macrodef name="make.wrapper">
	    <attribute name="width" default="100%" />
	    <attribute name="height" default="100%" />
	    <attribute name="title" default="" />
	    <attribute name="version.major" default="9" />
	    <attribute name="version.minor" default="0" />
	    <attribute name="version.revision" default="0" />
	    <attribute name="application" default="" />
	    <attribute name="swf" default="" />
	    <attribute name="bgcolor" default="#869ca7" />
	    <attribute name="wrapper.dir" />
	    <attribute name="output.dir" />
	    <attribute name="output.html" />
	    <sequential>
	    	<copy todir="@{output.dir}">
	    		<fileset dir="@{wrapper.dir}">
		    		<exclude name="**/index.template.html" />
	    		</fileset>
	    	</copy>
	    	<copy 
	    		file="@{wrapper.dir}/index.template.html"
	    		tofile="@{output.html}" />
	    	<replaceregexp 
	    		file="@{output.html}"
	    		flags="gs"
	    		match="\$\{width\}"
	    		replace="@{width}"/>
	    	<replaceregexp 
	    		file="@{output.html}"
	    		flags="gs"
	    		match="\$\{height\}"
	    		replace="@{height}"/>
	    	<replaceregexp 
	    		file="@{output.html}"
	    		flags="gs"
	    		match="\$\{title\}"
	    		replace="@{title}"
	    		encoding="utf-8"/>
	    	<replaceregexp 
	    		file="@{output.html}"
	    		flags="gs"
	    		match="\$\{version_major\}"
	    		replace="@{version.major}"/>
	    	<replaceregexp 
	    		file="@{output.html}"
	    		flags="gs"
	    		match="\$\{version_minor\}"
	    		replace="@{version.minor}"/>
	    	<replaceregexp 
	    		file="@{output.html}"
	    		flags="gs"
	    		match="\$\{version_revision\}"
	    		replace="@{version.revision}"/>
	    	<replaceregexp 
	    		file="@{output.html}"
	    		flags="gs"
	    		match="\$\{application\}"
	    		replace="@{application}"/>
	    	<replaceregexp 
	    		file="@{output.html}"
	    		flags="gs"
	    		match="\$\{bgcolor\}"
	    		replace="@{bgcolor}"/>
	    	<replaceregexp 
	    		file="@{output.html}"
	    		flags="gs"
	    		match="\$\{swf\}"
	    		replace="@{swf}"/>
	    </sequential>
	</macrodef>
</project>